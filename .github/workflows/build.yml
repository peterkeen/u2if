name: Build U2IF

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      flavor_matrix: ${{ steps.flavorStep.outputs.flavors }}
    steps:
      - uses: actions/checkout@v4      
      - id: flavorStep
        run: |
          FLAVORS=$(python3 ./firmware/build.py -flavors)
          echo "flavors=$FLAVORS" >> $GITHUB_OUTPUT
          
  build_uf2:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.flavor_matrix) }}

    steps:
      - uses: actions/checkout@v4
      - name: Install gcc-arm
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: '10-2020-q4'
      - id: pico-sdk-cache-key
        run: |
          echo "cachekey=$(git submodule status firmware/pico-sdk | cut -d' ' -f 2)" >> $GITHUB_OUTPUT

      - name: Cache pico-sdk
        id: cache-pico-sdk
        uses: actions/cache@v4
        with:
          path: firmware/pico-sdk
          key: firmware-pico-sdk-${{ steps.pico-sdk-cache-key.cachekey }}

      - name: Get pico-sdk submodule
        if: steps.cache-pico-sdk.outputs.cache-hit != 'true'
        run: git submodule update --init --recursive
#-- HACK-----------------------------------------------------------
# needed for older pico-sdk, see here for more info:
# https://github.com/raspberrypi/pico-sdk/pull/457
      - name: Patch pico-sdk for crystal startup
        run: sed -i 's/xosc_hw->startup = startup_delay;/xosc_hw->startup = startup_delay * 64;/' firmware/pico-sdk/src/rp2_common/hardware_xosc/xosc.c
#-- HACK-----------------------------------------------------------
      - name: Build firmwares
        run: |
          arm-none-eabi-gcc --version
          cd firmware
          ./build.py ${{ matrix.target }}
      - name: Add Build Artifacts to CI Run
        uses: actions/upload-artifact@v4
        with:
          name: u2if_${{ matrix.target }}.uf2
          path: firmware/release/u2if_${{ matrix.target }}.uf2
      - name: Add Release Assets
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: firmware/release/u2if_${{ matrix.target }}.uf2

  build_py:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: build python dist
        run: pip install --upgrade build && python -m build

      - name: Add Build Artifacts to CI Run
        uses: actions/upload-artifact@v4
        with:
          name: u2if_py
          path: dist/*
      - name: Add Release Assets
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist/*
          
  build_docker:
    runs-on: ubuntu-latest
    needs:
      - build_py
      - build_uf2

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Download python artifacts
        uses: actions/download-artifact@v4
        with:
          name: u2if_py

      - name: Download uf2 artifacts
        uses: actions/download-artifact@v4
        with:
          name: firmware_uf2s

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

